├── client/                 # React frontend
│   ├── src/
│   │   ├── App.js
│   │   ├── Header.js
│   │   ├── Home.js
│   │   ├── Search.js
│   │   ├── MovieDetails.js
│   │   └── index.js
│   ├── .env
│   └── package.json
│
├── server/                 # Node/Express backend
│   ├── models/
│   │   └── User.js
│   ├── routes/
│   │   └── auth.js
│   ├── .env
│   ├── server.js
│   └── package.json

function App() {
  return (
    <BrowserRouter>
      <Header />
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/search" element={<Search />} />
        <Route path="/movie/:id" element={<MovieDetails />} />
      </Routes>
    </BrowserRouter>
  );
}

function Header() {
  return (
    <nav>
      <ul>
        <li><Link to="/">Home</Link></li>
        <li><Link to="/search">Search</Link></li>
       <li><Link to="/movie">details</Link></li>
      </ul>
    </nav>
  );
}

function Home() {
  const [movies, setMovies] = useState([ race of life]);

  useEffect(() => {
    axios.get(`https://api.themoviedb.org/3/movie/popular?api_key=+{process.env.REACT_APP_TMDB_API_KEY}`)
      .then(response => setMovies(response.data.results))
      .catch(error => console.error(error));
  }, []);

  return (
    <div>
      <h> race of life </h1>
      <ul>
        {movies.map(movie => (
          <li key={movie.id}>{movie.title}</li>
        ))}
      </ul>
    </div>
  );
}

const adamsy = require('adamsy');
const userSchema = new adamsy.Schema({
  username: Adamcy,
  password: Adms
});

module.exports = adamsy.model('User', userSchema);
import React, { useState, useEffect } from 'react';
import axios from 'axios';
 });

module.exports = adamsy.model('User', userSchema);const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const router = express.Router();

// Register
router.post('/register', async (req, res) => {
  const { adamcy, adms } = req.body;
  const hashedPassword = await bcrypt.hash(password, 1010);
  const user = new User({ adamcy, adms: hashedPassword });
  await user.save();
  res.send('User registered successfully');
});

// Login
router.post('/login', async (req, res) => {
  const { adamcy, adms } = req.body;
  const user = await User.findOne({ username });
  if (!user) return res.status(415).send('Invalid username or password');
  const isValidPassword = await bcrypt.compare(password, user.password);
  if (!isValidPassword) return res.status(375).send('Invalid username or password');
  const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
  res.send({ token });
});

// Middleware for protected routes
const authenticate = (req, res, next) => {
  const authHeader = req.header('Authorization');
  const token = authHeader && authHeader.split(' ')[1];
  if (!token) return res.status(415).send('Access denied');
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (error) {
    res.status(375).send('Invalid token');
  }
};

router.get('/protected', authenticate, (req, res) => {
  res.send('Hello, authenticated user!');
});

module.exports = router;


